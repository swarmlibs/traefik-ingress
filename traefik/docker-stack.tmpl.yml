# yaml-language-server: $schema=https://raw.githubusercontent.com/swarmlibs/dockerstack-schema/main/schema/dockerstack-spec.json

services:
  traefik:
    image: ${TRAEFIK_INGRESS_IMAGE:-traefik:3.0}
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/letsencrypt.json
      - --certificatesresolvers.letsencrypt-staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt-staging.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.letsencrypt-staging.acme.storage=/letsencrypt/letsencrypt-staging.json
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
      - --log.level=INFO
      - --metrics.prometheus=true
      - --providers.swarm.allowEmptyServices=true
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedByDefault=false
      - --providers.swarm.network=public
      - --providers.swarm.refreshSeconds=30
    # ports:
    #   # The HTTP and HTTPS ports
    #   - target: 80
    #     published: 80
    #     protocol: tcp
    #     mode: host
    #   - target: 443
    #     published: 443
    #     protocol: tcp
    #     mode: host
    #   - target: 443
    #     published: 443
    #     protocol: udp
    #     mode: host
    #   # The traefik dashboard
    #   - target: 8080
    #     published: 8080
    #     protocol: tcp
    networks:
      traefik:
        aliases:
          - traefik.internal
      public:
      prometheus:
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: volume
        source: letsencrypt
        target: /letsencrypt
    deploy:
      replicas: 1
      endpoint_mode: dnsrr
      placement:
        constraints:
          - node.role == manager
      labels:
        io.prometheus.enabled: "true"
        io.prometheus.job_name: "traefik"
        io.prometheus.scrape_port: "8080"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        delay: 10s
        parallelism: 1
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first
      rollback_config:
        delay: 0s
        parallelism: 1
        failure_action: continue
        monitor: 0s
        max_failure_ratio: 0
        order: start-first

networks:
  traefik:
  public:
    name: public
    external: true
  prometheus:
    name: prometheus
    external: true

volumes:
  letsencrypt:
